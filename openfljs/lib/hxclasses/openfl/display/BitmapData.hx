package openfl.display;

@:access(lime.graphics.Image) @:access(lime.graphics.ImageBuffer) @:access(lime.math.Rectangle) @:access(openfl.geom.ColorTransform) @:access(openfl.geom.Matrix) @:access(openfl.geom.Point) @:access(openfl.geom.Rectangle) @:autoBuild(openfl.Assets.embedBitmap()) extern class BitmapData implements IBitmapDrawable {
	@:noCompletion @:dox(hide) var __cacheAsBitmap : Bool;
	@:noCompletion @:dox(hide) var __worldColorTransform : openfl.geom.ColorTransform;
	@:noCompletion @:dox(hide) var __worldTransform : openfl.geom.Matrix;
	var height(default,null) : Int;
	var rect(default,null) : openfl.geom.Rectangle;
	var transparent(default,null) : Bool;
	var width(default,null) : Int;
	function new(width : Int, height : Int, transparent : Bool = false, fillColor : UInt = 0) : Void;
	@:noCompletion @:dox(hide) function __drawGL(renderSession : openfl._internal.renderer.RenderSession, width : Int, height : Int, source : IBitmapDrawable, ?matrix : openfl.geom.Matrix, ?colorTransform : openfl.geom.ColorTransform, ?blendMode : BlendMode, ?clipRect : openfl.geom.Rectangle, smoothing : Bool = false, drawSelf : Bool = false, clearBuffer : Bool = false, readPixels : Bool = false) : Void;
	@:noCompletion @:dox(hide) function __renderCairo(renderSession : openfl._internal.renderer.RenderSession) : Void;
	@:noCompletion @:dox(hide) function __renderCairoMask(renderSession : openfl._internal.renderer.RenderSession) : Void;
	@:noCompletion @:dox(hide) function __renderCanvas(renderSession : openfl._internal.renderer.RenderSession) : Void;
	@:noCompletion @:dox(hide) function __renderCanvasMask(renderSession : openfl._internal.renderer.RenderSession) : Void;
	@:noCompletion @:dox(hide) function __renderGL(renderSession : openfl._internal.renderer.RenderSession) : Void;
	@:noCompletion @:dox(hide) function __updateChildren(transformOnly : Bool) : Void;
	@:noCompletion @:dox(hide) function __updateMask(maskGraphics : Graphics) : Void;
	function applyFilter(sourceBitmapData : BitmapData, sourceRect : openfl.geom.Rectangle, destPoint : openfl.geom.Point, filter : openfl.filters.BitmapFilter) : Void;
	function clone() : BitmapData;
	function colorTransform(rect : openfl.geom.Rectangle, colorTransform : openfl.geom.ColorTransform) : Void;
	function copyChannel(sourceBitmapData : BitmapData, sourceRect : openfl.geom.Rectangle, destPoint : openfl.geom.Point, sourceChannel : Int, destChannel : Int) : Void;
	function copyPixels(sourceBitmapData : BitmapData, sourceRect : openfl.geom.Rectangle, destPoint : openfl.geom.Point, ?alphaBitmapData : BitmapData, ?alphaPoint : openfl.geom.Point, mergeAlpha : Bool = false) : Void;
	function dispose() : Void;
	@:has_untyped function draw(source : IBitmapDrawable, ?matrix : openfl.geom.Matrix, ?colorTransform : openfl.geom.ColorTransform, ?blendMode : BlendMode, ?clipRect : openfl.geom.Rectangle, smoothing : Bool = false) : Void;
	function encode(rect : openfl.geom.Rectangle, compressor : Dynamic, ?byteArray : openfl.utils.ByteArray) : openfl.utils.ByteArray;
	function fillRect(rect : openfl.geom.Rectangle, color : Int) : Void;
	function floodFill(x : Int, y : Int, color : Int) : Void;
	function generateFilterRect(sourceRect : openfl.geom.Rectangle, filter : openfl.filters.BitmapFilter) : openfl.geom.Rectangle;
	function getBuffer(gl : lime.graphics.GLRenderContext) : lime.graphics.opengl.GLBuffer;
	function getColorBoundsRect(mask : Int, color : Int, findColor : Bool = false) : openfl.geom.Rectangle;
	function getPixel(x : Int, y : Int) : Int;
	function getPixel32(x : Int, y : Int) : Int;
	function getPixels(rect : openfl.geom.Rectangle) : openfl.utils.ByteArray;
	function getSurface() : lime.graphics.cairo.CairoImageSurface;
	function getTexture(gl : lime.graphics.GLRenderContext) : lime.graphics.opengl.GLTexture;
	function getVector(rect : openfl.geom.Rectangle) : openfl.Vector<UInt>;
	function histogram(?hRect : openfl.geom.Rectangle) : Array<Array<Int>>;
	function hitTest(firstPoint : openfl.geom.Point, firstAlphaThreshold : Int, secondObject : Dynamic, ?secondBitmapDataPoint : openfl.geom.Point, secondAlphaThreshold : Int = 0) : Bool;
	function lock() : Void;
	function merge(sourceBitmapData : BitmapData, sourceRect : openfl.geom.Rectangle, destPoint : openfl.geom.Point, redMultiplier : UInt, greenMultiplier : UInt, blueMultiplier : UInt, alphaMultiplier : UInt) : Void;
	function noise(randomSeed : Int, low : Int = 0, high : Int = 0, channelOptions : Int = 0, grayScale : Bool = false) : Void;
	function paletteMap(sourceBitmapData : BitmapData, sourceRect : openfl.geom.Rectangle, destPoint : openfl.geom.Point, ?redArray : Array<Int>, ?greenArray : Array<Int>, ?blueArray : Array<Int>, ?alphaArray : Array<Int>) : Void;
	function perlinNoise(baseX : Float, baseY : Float, numOctaves : UInt, randomSeed : Int, stitch : Bool, fractalNoise : Bool, channelOptions : UInt = 0, grayScale : Bool = false, ?offsets : Array<openfl.geom.Point>) : Void;
	function scroll(x : Int, y : Int) : Void;
	function setPixel(x : Int, y : Int, color : Int) : Void;
	function setPixel32(x : Int, y : Int, color : Int) : Void;
	function setPixels(rect : openfl.geom.Rectangle, byteArray : openfl.utils.ByteArray) : Void;
	function setVector(rect : openfl.geom.Rectangle, inputVector : openfl.Vector<UInt>) : Void;
	function threshold(sourceBitmapData : BitmapData, sourceRect : openfl.geom.Rectangle, destPoint : openfl.geom.Point, operation : String, threshold : Int, color : Int = 0, mask : Int = 0, copySource : Bool = false) : Int;
	function unlock(?changeRect : openfl.geom.Rectangle) : Void;
	static function fromBase64(base64 : String, type : String, onload : Null<BitmapData -> Void> = null) : BitmapData;
	static function fromBytes(bytes : openfl.utils.ByteArray, ?rawAlpha : openfl.utils.ByteArray, onload : Null<BitmapData -> Void> = null) : BitmapData;
	static function fromCanvas(canvas : js.html.CanvasElement, transparent : Bool = false) : BitmapData;
	static function fromFile(path : String, onload : Null<BitmapData -> Void> = null, onerror : Null<Void -> Void> = null) : BitmapData;
	static function fromImage(image : lime.graphics.Image, transparent : Bool = false) : BitmapData;
	@:noCompletion private var __image:lime.graphics.Image;
}
