package lime.audio;

extern class ALAudioContext {
	var BITS : Int;
	var BUFFER : Int;
	var BUFFERS_PROCESSED : Int;
	var BUFFERS_QUEUED : Int;
	var BYTE_OFFSET : Int;
	var CHANNELS : Int;
	var CONE_INNER_ANGLE : Int;
	var CONE_OUTER_ANGLE : Int;
	var CONE_OUTER_GAIN : Int;
	var DIRECTION : Int;
	var DISTANCE_MODEL : Int;
	var DOPPLER_FACTOR : Int;
	var DOPPLER_VELOCITY : Int;
	var EXPONENT_DISTANCE : Int;
	var EXPONENT_DISTANCE_CLAMPED : Int;
	var EXTENSIONS : Int;
	var FALSE : Int;
	var FORMAT_MONO16 : Int;
	var FORMAT_MONO8 : Int;
	var FORMAT_STEREO16 : Int;
	var FORMAT_STEREO8 : Int;
	var FREQUENCY : Int;
	var GAIN : Int;
	var INITIAL : Int;
	var INVALID_ENUM : Int;
	var INVALID_NAME : Int;
	var INVALID_OPERATION : Int;
	var INVALID_VALUE : Int;
	var INVERSE_DISTANCE : Int;
	var INVERSE_DISTANCE_CLAMPED : Int;
	var LINEAR_DISTANCE : Int;
	var LINEAR_DISTANCE_CLAMPED : Int;
	var LOOPING : Int;
	var MAX_DISTANCE : Int;
	var MAX_GAIN : Int;
	var MIN_GAIN : Int;
	var NONE : Int;
	var NO_ERROR : Int;
	var ORIENTATION : Int;
	var OUT_OF_MEMORY : Int;
	var PAUSED : Int;
	var PITCH : Int;
	var PLAYING : Int;
	var POSITION : Int;
	var REFERENCE_DISTANCE : Int;
	var RENDERER : Int;
	var ROLLOFF_FACTOR : Int;
	var SAMPLE_OFFSET : Int;
	var SEC_OFFSET : Int;
	var SIZE : Int;
	var SOURCE_RELATIVE : Int;
	var SOURCE_STATE : Int;
	var SOURCE_TYPE : Int;
	var SPEED_OF_SOUND : Int;
	var STATIC : Int;
	var STOPPED : Int;
	var STREAMING : Int;
	var TRUE : Int;
	var UNDETERMINED : Int;
	var VELOCITY : Int;
	var VENDOR : Int;
	var VERSION : Int;
	function new() : Void;
	function buffer3f(buffer : Int, param : Int, value1 : Float, value2 : Float, value3 : Float) : Void;
	function buffer3i(buffer : Int, param : Int, value1 : Int, value2 : Int, value3 : Int) : Void;
	function bufferData(buffer : Int, format : Int, data : lime.utils.ByteArray, size : Int, freq : Int) : Void;
	function bufferf(buffer : Int, param : Int, value : Float) : Void;
	function bufferfv(buffer : Int, param : Int, values : Array<Float>) : Void;
	function bufferi(buffer : Int, param : Int, value : Int) : Void;
	function bufferiv(buffer : Int, param : Int, values : Array<Int>) : Void;
	function deleteBuffer(buffer : Int) : Void;
	function deleteBuffers(buffers : Array<Int>) : Void;
	function deleteSource(source : Int) : Void;
	function deleteSources(sources : Array<Int>) : Void;
	function disable(capability : Int) : Void;
	function distanceModel(distanceModel : Int) : Void;
	function dopplerFactor(value : Float) : Void;
	function dopplerVelocity(value : Float) : Void;
	function enable(capability : Int) : Void;
	function genBuffer() : Int;
	function genBuffers(n : Int) : Array<Int>;
	function genSource() : Int;
	function genSources(n : Int) : Array<Int>;
	function getBoolean(param : Int) : Bool;
	function getBooleanv(param : Int, count : Int = 0) : Array<Bool>;
	function getBuffer3f(buffer : Int, param : Int) : Array<Float>;
	function getBuffer3i(buffer : Int, param : Int) : Array<Int>;
	function getBufferf(buffer : Int, param : Int) : Float;
	function getBufferfv(buffer : Int, param : Int, count : Int = 0) : Array<Float>;
	function getBufferi(buffer : Int, param : Int) : Int;
	function getBufferiv(buffer : Int, param : Int, count : Int = 0) : Array<Int>;
	function getDouble(param : Int) : Float;
	function getDoublev(param : Int, count : Int = 0) : Array<Float>;
	function getEnumValue(ename : String) : Int;
	function getError() : Int;
	function getErrorString() : String;
	function getFloat(param : Int) : Float;
	function getFloatv(param : Int, count : Int = 0) : Array<Float>;
	function getInteger(param : Int) : Int;
	function getIntegerv(param : Int, count : Int = 0) : Array<Int>;
	function getListener3f(param : Int) : Array<Float>;
	function getListener3i(param : Int) : Array<Int>;
	function getListenerf(param : Int) : Float;
	function getListenerfv(param : Int, count : Int = 0) : Array<Float>;
	function getListeneri(param : Int) : Int;
	function getListeneriv(param : Int, count : Int = 0) : Array<Int>;
	function getProcAddress(fname : String) : Dynamic;
	function getSource3f(source : Int, param : Int) : Array<Float>;
	function getSource3i(source : Int, param : Int) : Array<Int>;
	function getSourcef(source : Int, param : Int) : Float;
	function getSourcefv(source : Int, param : Int) : Array<Float>;
	function getSourcei(source : Int, param : Int) : Int;
	function getSourceiv(source : Int, param : Int, count : Int = 0) : Array<Int>;
	function getString(param : Int) : String;
	function isBuffer(buffer : Int) : Bool;
	function isEnabled(capability : Int) : Bool;
	function isExtensionPresent(extname : String) : Bool;
	function isSource(source : Int) : Bool;
	function listener3f(param : Int, value1 : Float, value2 : Float, value3 : Float) : Void;
	function listener3i(param : Int, value1 : Int, value2 : Int, value3 : Int) : Void;
	function listenerf(param : Int, value : Float) : Void;
	function listenerfv(param : Int, values : Array<Float>) : Void;
	function listeneri(param : Int, value : Int) : Void;
	function listeneriv(param : Int, values : Array<Int>) : Void;
	function source3f(source : Int, param : Int, value1 : Float, value2 : Float, value3 : Float) : Void;
	function source3i(source : Int, param : Int, value1 : Int, value2 : Int, value3 : Int) : Void;
	function sourcePause(source : Int) : Void;
	function sourcePausev(sources : Array<Int>) : Void;
	function sourcePlay(source : Int) : Void;
	function sourcePlayv(sources : Array<Int>) : Void;
	function sourceQueueBuffer(source : Int, buffer : Int) : Void;
	function sourceQueueBuffers(source : Int, nb : Int, buffers : Array<Int>) : Void;
	function sourceRewind(source : Int) : Void;
	function sourceRewindv(sources : Array<Int>) : Void;
	function sourceStop(source : Int) : Void;
	function sourceStopv(sources : Array<Int>) : Void;
	function sourceUnqueueBuffer(source : Int) : Int;
	function sourceUnqueueBuffers(source : Int, nb : Int) : Array<Int>;
	function sourcef(source : Int, param : Int, value : Float) : Void;
	function sourcefv(source : Int, param : Int, values : Array<Float>) : Void;
	function sourcei(source : Int, param : Int, value : Int) : Void;
	function sourceiv(source : Int, param : Int, values : Array<Int>) : Void;
	function speedOfSound(value : Float) : Void;
}
